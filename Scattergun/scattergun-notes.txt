coverclock@silver:~$ pgrep -a rngd
1282 /usr/sbin/rngd -r /dev/TrueRNG

coverclock@silver:~$ sudo cat /dev/urandom | rngtest -c 1000
rngtest 4
Copyright (c) 2004 by Henrique de Moraes Holschuh
This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

rngtest: starting FIPS tests...
rngtest: bits received from input: 20000032
rngtest: FIPS 140-2 successes: 998
rngtest: FIPS 140-2 failures: 2
rngtest: FIPS 140-2(2001-10-10) Monobit: 0
rngtest: FIPS 140-2(2001-10-10) Poker: 1
rngtest: FIPS 140-2(2001-10-10) Runs: 0
rngtest: FIPS 140-2(2001-10-10) Long run: 1
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=2.661; avg=8.667; max=18.626)Gibits/s
rngtest: FIPS tests speed: (min=46.071; avg=54.538; max=55.126)Mibits/s
rngtest: Program run time: 365561 microseconds

coverclock@silver:~$ sudo cat /dev/random | rngtest -c 1000
rngtest 4
Copyright (c) 2004 by Henrique de Moraes Holschuh
This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

rngtest: starting FIPS tests...
rngtest: bits received from input: 20000032
rngtest: FIPS 140-2 successes: 998
rngtest: FIPS 140-2 failures: 2
rngtest: FIPS 140-2(2001-10-10) Monobit: 0
rngtest: FIPS 140-2(2001-10-10) Poker: 0
rngtest: FIPS 140-2(2001-10-10) Runs: 1
rngtest: FIPS 140-2(2001-10-10) Long run: 1
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=59.875; avg=80.682; max=175.873)Kibits/s
rngtest: FIPS tests speed: (min=33.818; avg=37.112; max=54.652)Mibits/s
rngtest: Program run time: 242596135 microseconds

coverclock@silver:~$ dd if=/dev/random of=random.dat bs=1024 count=128 iflag=fullblock
128+0 records in
128+0 records out
131072 bytes (131 kB) copied, 12.1144 s, 10.8 kB/s

coverclock@silver:~$ ent random.dat
Entropy = 7.998600 bits per byte.

Optimum compression would reduce the size
of this 131072 byte file by 0 percent.

Chi square distribution for 131072 samples is 253.52, and randomly
would exceed this value 50.00 percent of the times.

Arithmetic mean value of data bytes is 127.4090 (127.5 = random).
Monte Carlo value for Pi is 3.145983062 (error 0.14 percent).
Serial correlation coefficient is 0.001483 (totally uncorrelated = 0.0).

coverclock@silver:~$ dd if=/dev/urandom of=urandom.dat bs=1024 count=128 iflag=fullblock
128+0 records in
128+0 records out
131072 bytes (131 kB) copied, 0.0123028 s, 10.7 MB/s

coverclock@silver:~$ ent urandom.dat
Entropy = 7.998691 bits per byte.

Optimum compression would reduce the size
of this 131072 byte file by 0 percent.

Chi square distribution for 131072 samples is 238.10, and randomly
would exceed this value 75.00 percent of the times.

Arithmetic mean value of data bytes is 127.4198 (127.5 = random).
Monte Carlo value for Pi is 3.133897917 (error 0.24 percent).
Serial correlation coefficient is -0.005254 (totally uncorrelated = 0.0).

coverclock@silver:~$ cd /proc/sys/kernel/random
coverclock@silver:random$ ls
boot_id        read_wakeup_threshold    write_wakeup_threshold
entropy_avail  urandom_min_reseed_secs
poolsize       uuid
coverclock@silver:random$ cat poolsize
4096
coverclock@silver:random$ cat entropy_avail
3101

coverclock@silver:~$ cat /dev/urandom | rawtoppm -rgb 256 256 | pnmtopng > urandom.png
coverclock@silver:~$ cat /dev/random | rawtoppm -rgb 256 256 | pnmtopng > random.png


coverclock@silver:~/src/com-diag-scattergun/Scattergun$ time dd if=/dev/random of=megabyte.dat bs=1000 count=1000 iflag=fullblock
1000+0 records in
1000+0 records out
1000000 bytes (1.0 MB) copied, 93.8507 s, 10.7 kB/s

real	1m33.853s
user	0m0.015s
sys	0m0.688s
coverclock@silver:~/src/com-diag-scattergun/Scattergun$ ls -l
total 3068
-rw-r--r-- 1 coverclock coverclock 1000000 Dec 24 09:15 megabyte.dat
-rw-r--r-- 1 coverclock coverclock 1249280 Dec 24 08:36 random.dat
-rw-r--r-- 1 coverclock coverclock  197280 Dec 24 08:43 random.png
-rwxrwxr-x 1 coverclock coverclock    1449 Dec 24 09:12 scattergun.sh
-rw------- 1 coverclock coverclock  197280 Dec 23 10:52 scattergun.sh-20151223T174754.495850635+00:00.png
-rw------- 1 coverclock coverclock  197280 Dec 23 11:37 scattergun.sh-20151223T183718.444762776+00:00.png
-rw-r--r-- 1 coverclock coverclock  274432 Dec 24 09:13 typescript
coverclock@silver:~/src/com-diag-scattergun/Scattergun$ cp -i megabyte.dat /home/coverclock/Projects/scattergun/usnistgov/SP800-90B_EntropyAssessment/TrueRNG.dat

coverclock@silver:SP800-90B_EntropyAssessment$ python iid_main.py TrueRNG.dat
usage: iid_main.py [-h] [-v] datafile bits_per_symbol number_of_shuffles
iid_main.py: error: too few arguments
coverclock@silver:SP800-90B_EntropyAssessment$ python iid_main.py TrueRNG.dat 8 1000 -v
Read in file TrueRNG.dat, 1000000 bytes long.
Dataset: 1000000 8-bit symbols.
Output symbol values: min = 0, max = 255


Compression Test:      
	Scores                   Ranks
	106899                   861 
	106868                   830 
	106820                   571 
	106864                   724 
	106711                    83 
	106776                   356 
	106707                    43*
	106771                   351 
	106921                   936 
	106820                   540 
	                         --- 
	                           1
Passed Compression Test

Over/under Test:       
	Scores                   Ranks
	16  49881                452   689 
	19  49606                842   113 
	16  49640                468   146 
	14  49822                 33*  557 
	16  50031                468   921 
	21  49741                955*  336 
	17  49949                501   806 
	17  49774                501   436 
	16  49750                467   317 
	15  49559                228    77 
	                         ---   --- 
	                           2     0
Passed Over/under Test

Excursion Test:        
	Scores                   Ranks
	17831.9                  405 
	15029.9                  215 
	25107.8                  780 
	16808.5                  343 
	14655.3                  184 
	13654                    141 
	25059.4                  797 
	22094.8                  680 
	15144.5                  224 
	14377.2                  165 
	                         --- 
	                           0
Passed Excursion Test

Directional runs Test: 
	Scores                   Ranks
	66593     7  49820       656   501   159 
	66455     8  49938       272   575   865 
	66303     9  49879        42*  941   565 
	66304     8  49875        47*  563   568 
	66651     9  49858       798   947   449 
	66500     7  49953       407   501   898 
	66366     7  49863       104   501   476 
	66241     7  49906        19*  501   767 
	66600     8  49926       699   564   824 
	66518     7  49827       458   501   206 
	                         ---   ---   --- 
	                           3     0     0
Passed Directional runs Test

Covariance Test:       
	Scores                   Ranks
	-8.87989                 311 
	13.5312                  790 
	26.9395                  947 
	-2.47891                 442 
	-24.4772                  88 
	-1.44018                 453 
	-3.2677                  430 
	12.6687                  774 
	-3.4209                  414 
	8.0185                   681 
	                         --- 
	                           0
Passed Covariance Test

Collision Test:        
	Scores                   Ranks
	1  19.7504  64           501   567   501 
	1  19.7549  63           501   607   423 
	1  19.734  68            501   533   784 
	1  19.5505  66           501   118   612 
	1  19.8583  58           501   805    31*
	1  19.7212  71           501   502   901 
	1  19.7111  67           501   460   698 
	1  19.929  82            501   929   998*
	1  19.5923  56           501   188     5*
	1  19.5757  68           501   135   777 
	                         ---   ---   --- 
	                           0     0     3
Passed Collision Test

** Passed iid shuffle tests
()

Chi square independence
	score = 64819.2, degrees of freedom = 65280, cut-off = 66402.2
** Passed chi-square independence test

Chi square stability
	score = 2240.22, degrees of freedom = 2313 cut-off = 2528.88
** Passed chi-square stability test

IID = True
min-entropy = 7.88663

Compression sanity check...
	dataset 1 compressed length = 855192, cutoff = 788663...Pass

	dataset 2 compressed length = 854944, cutoff = 788663...Pass

	dataset 3 compressed length = 854560, cutoff = 788663...Pass

	dataset 4 compressed length = 854912, cutoff = 788663...Pass

	dataset 5 compressed length = 853688, cutoff = 788663...Pass

	dataset 6 compressed length = 854208, cutoff = 788663...Pass

	dataset 7 compressed length = 853656, cutoff = 788663...Pass

	dataset 8 compressed length = 854168, cutoff = 788663...Pass

	dataset 9 compressed length = 855368, cutoff = 788663...Pass

	dataset 10 compressed length = 854560, cutoff = 788663...Pass


Collision sanity check...
	Dividing dataset into 4-tuples
	Check rule 1 - do three or more 4-tuples have the same value?...Pass
	Check rule 2 - probability of number of collisions below cutoff
		number of collisions = 2, cutoff = 9.96325...Pass

sanity check = PASS
time: (2790.31 sec)
coverclock@silver:SP800-90B_EntropyAssessment$ 

coverclock@silver:SP800-90B_EntropyAssessment$ python noniid_main.py TrueRNG.dat 8 -v
Read in file TrueRNG.dat, 1000000 bytes long.
Dataset: 1000000 8-bit symbols.
Output symbol values: min = 0, max = 255
- Collision test          : p(max) = 0.0106201, min-entropy = 6.55706
- Partial collection test : p(max) = 0.00772762, min-entropy = 7.01576
- Markov test (map 6 bits): p(max) = 1.26324e-223, min-entropy = 5.78479
- Compression test        : p(max) = 0.00871277, min-entropy = 6.84265
- Frequency test          : p(max) = 0.004079, min-entropy = 7.55901
min-entropy = 5.78479

Compression sanity check...
	dataset 1 compressed length = 855192, cutoff = 578479...Pass

	dataset 2 compressed length = 854944, cutoff = 578479...Pass

	dataset 3 compressed length = 854560, cutoff = 578479...Pass

	dataset 4 compressed length = 854912, cutoff = 578479...Pass

	dataset 5 compressed length = 853688, cutoff = 578479...Pass

	dataset 6 compressed length = 854208, cutoff = 578479...Pass

	dataset 7 compressed length = 853656, cutoff = 578479...Pass

	dataset 8 compressed length = 854168, cutoff = 578479...Pass

	dataset 9 compressed length = 855368, cutoff = 578479...Pass

	dataset 10 compressed length = 854560, cutoff = 578479...Pass


Collision sanity check...
	Dividing dataset into 6-tuples
	Check rule 1 - do three or more 6-tuples have the same value?...Pass
	Check rule 2 - probability of number of collisions below cutoff
		number of collisions = 0, cutoff = 0.494648...Pass

sanity check = PASS
time: (42.5101 sec)
coverclock@silver:SP800-90B_EntropyAssessment$ 

pi@raspberrypi ~/scattergun/com-diag-scattergun/Scattergun $ bash -x scattergun.sh
++ basename scattergun.sh
+ ZERO=scattergun.sh
+ SOURCE=/dev/random
++ date -u +%Y%m%dT%H%M%S%N%z
+ STAMP=20151226T213716046444907+0000
+ uname -a
Linux raspberrypi 3.18.11-v7+ #781 SMP PREEMPT Tue Apr 21 18:07:59 BST 2015 armv7l GNU/Linux
+ lsb_release -a
scattergun.sh: line 11: lsb_release: command not found
+ ls -l /dev/random
crw-rw-rw- 1 root root 1, 8 Jan  1  1970 /dev/random
+ ls -l /dev/urandom
crw-rw-rw- 1 root root 1, 9 Jan  1  1970 /dev/urandom
+ ls -l /dev/hwrng
crw------- 1 root root 10, 183 Dec 26 20:47 /dev/hwrng
+ ls -l /dev/TrueRNG
lrwxrwxrwx 1 root root 7 Dec 26 21:22 /dev/TrueRNG -> ttyACM0
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '0: '
0: + cat /proc/sys/kernel/random/entropy_avail
1760
+ sleep 1
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '1: '
1: + cat /proc/sys/kernel/random/entropy_avail
1772
+ sleep 1
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '2: '
2: + cat /proc/sys/kernel/random/entropy_avail
1785
+ sleep 1
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '3: '
3: + cat /proc/sys/kernel/random/entropy_avail
1734
+ sleep 1
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '4: '
4: + cat /proc/sys/kernel/random/entropy_avail
1747
+ sleep 1
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '5: '
5: + cat /proc/sys/kernel/random/entropy_avail
1760
+ sleep 1
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '6: '
6: + cat /proc/sys/kernel/random/entropy_avail
1773
+ sleep 1
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '7: '
7: + cat /proc/sys/kernel/random/entropy_avail
1722
+ sleep 1
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '8: '
8: + cat /proc/sys/kernel/random/entropy_avail
1735
+ sleep 1
+ for STEP in 0 1 2 3 4 5 6 7 8 9
+ echo -n '9: '
9: + cat /proc/sys/kernel/random/entropy_avail
1748
+ sleep 1
++ cat /proc/sys/kernel/random/poolsize
+ POOLSIZE=4096
+ BLOCKSIZE=512
+ dd if=/dev/random of=/dev/null bs=512 count=1 iflag=fullblock
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.00360718 s, 142 kB/s

real	0m0.015s
user	0m0.000s
sys	0m0.010s
+ dd if=/dev/random of=/dev/null bs=512 count=1 iflag=fullblock
1+0 records in
1+0 records out
512 bytes (512 B) copied, 0.00653212 s, 78.4 kB/s

real	0m0.018s
user	0m0.000s
sys	0m0.010s
+ lsmod
+ grep bcm2708_rng
bcm2708_rng              952  0 
+ ps -ef
+ grep rngd
root      6541     1  0 21:30 ?        00:00:01 /usr/sbin/rngd -r /dev/TrueRNG
pi        7395  7360  0 21:37 pts/0    00:00:00 grep rngd
+ [[ -r /etc/default/rng-tools ]]
+ . /etc/default/rng-tools
++ HRNGDEVICE=/dev/TrueRNG
+ echo HRNGDEVICE=/dev/TrueRNG
HRNGDEVICE=/dev/TrueRNG
+ ls -l /dev/TrueRNG
lrwxrwxrwx 1 root root 7 Dec 26 21:22 /dev/TrueRNG -> ttyACM0
+ [[ -x /usr/bin/rngtest ]]
+ cat /dev/random
+ time /usr/bin/rngtest -c 1000
rngtest 2-unofficial-mt.14
Copyright (c) 2004 by Henrique de Moraes Holschuh
This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

rngtest: starting FIPS tests...
rngtest: bits received from input: 20000032
rngtest: FIPS 140-2 successes: 1000
rngtest: FIPS 140-2 failures: 0
rngtest: FIPS 140-2(2001-10-10) Monobit: 0
rngtest: FIPS 140-2(2001-10-10) Poker: 0
rngtest: FIPS 140-2(2001-10-10) Runs: 0
rngtest: FIPS 140-2(2001-10-10) Long run: 0
rngtest: FIPS 140-2(2001-10-10) Continuous run: 0
rngtest: input channel speed: (min=71.524; avg=117.459; max=2006.086)Kibits/s
rngtest: FIPS tests speed: (min=4.133; avg=6.338; max=6.627)Mibits/s
rngtest: Program run time: 169296815 microseconds
3.25user 0.47system 2:49.30elapsed 2%CPU (0avgtext+0avgdata 1056maxresident)k
0inputs+0outputs (0major+68minor)pagefaults 0swaps
+ [[ -x /usr/bin/ent ]]
++ mktemp ./scattergun.sh-ent-20151226T213716046444907+0000.XXXXXXXXXX
+ FILE=./scattergun.sh-ent-20151226T213716046444907+0000.oLgsslRu8m
+ dd if=/dev/random of=./scattergun.sh-ent-20151226T213716046444907+0000.oLgsslRu8m bs=1024 count=128 iflag=fullblock
128+0 records in
128+0 records out
131072 bytes (131 kB) copied, 9.34421 s, 14.0 kB/s

real	0m9.355s
user	0m0.000s
sys	0m0.650s
+ mv -f ./scattergun.sh-ent-20151226T213716046444907+0000.oLgsslRu8m ./scattergun.sh-ent-20151226T213716046444907+0000.oLgsslRu8m.dat
+ /usr/bin/ent ./scattergun.sh-ent-20151226T213716046444907+0000.oLgsslRu8m.dat
Entropy = 7.998704 bits per byte.

Optimum compression would reduce the size
of this 131072 byte file by 0 percent.

Chi square distribution for 131072 samples is 235.62, and randomly
would exceed this value 75.00 percent of the times.

Arithmetic mean value of data bytes is 127.5600 (127.5 = random).
Monte Carlo value for Pi is 3.138658732 (error 0.09 percent).
Serial correlation coefficient is 0.000790 (totally uncorrelated = 0.0).

real	0m0.083s
user	0m0.070s
sys	0m0.010s
+ [[ ! -x /usr/bin/rawtoppm ]]
+ [[ ! -x /usr/bin/pnmtopng ]]
++ mktemp ./scattergun.sh-rawtoppm-20151226T213716046444907+0000.XXXXXXXXXX
+ FILE=./scattergun.sh-rawtoppm-20151226T213716046444907+0000.MKUTDGMTTR
+ time /usr/bin/rawtoppm -rgb 256 256
+ cat /dev/random
+ /usr/bin/pnmtopng
0.07user 0.04system 0:15.29elapsed 0%CPU (0avgtext+0avgdata 1204maxresident)k
0inputs+0outputs (0major+75minor)pagefaults 0swaps
+ mv -f ./scattergun.sh-rawtoppm-20151226T213716046444907+0000.MKUTDGMTTR ./scattergun.sh-rawtoppm-20151226T213716046444907+0000.MKUTDGMTTR.png
++ which iid_main.py
+ NISTCODE=/home/pi/scattergun/SP800-90B_EntropyAssessment/iid_main.py
+ [[ ! -z /home/pi/scattergun/SP800-90B_EntropyAssessment/iid_main.py ]]
++ dirname /home/pi/scattergun/SP800-90B_EntropyAssessment/iid_main.py
+ NISTPATH=/home/pi/scattergun/SP800-90B_EntropyAssessment
+++ pwd
++ mktemp /home/pi/scattergun/com-diag-scattergun/Scattergun/scattergun.sh-sp800-20151226T213716046444907+0000.XXXXXXXXXX
+ FILE=/home/pi/scattergun/com-diag-scattergun/Scattergun/scattergun.sh-sp800-20151226T213716046444907+0000.uQDAgCzlaU
+ dd if=/dev/random of=/home/pi/scattergun/com-diag-scattergun/Scattergun/scattergun.sh-sp800-20151226T213716046444907+0000.uQDAgCzlaU bs=1000 count=1000 iflag=fullblock
1000+0 records in
1000+0 records out
1000000 bytes (1.0 MB) copied, 78.4663 s, 12.7 kB/s

real	1m18.479s
user	0m0.020s
sys	0m5.070s
+ mv -f /home/pi/scattergun/com-diag-scattergun/Scattergun/scattergun.sh-sp800-20151226T213716046444907+0000.uQDAgCzlaU /home/pi/scattergun/com-diag-scattergun/Scattergun/scattergun.sh-sp800-20151226T213716046444907+0000.uQDAgCzlaU.dat
+ cd /home/pi/scattergun/SP800-90B_EntropyAssessment
+ python iid_main.py /home/pi/scattergun/com-diag-scattergun/Scattergun/scattergun.sh-sp800-20151226T213716046444907+0000.uQDAgCzlaU.dat 8 1000 -v
Read in file /home/pi/scattergun/com-diag-scattergun/Scattergun/scattergun.sh-sp800-20151226T213716046444907+0000.uQDAgCzlaU.dat, 1000000 bytes long.
Dataset: 1000000 8-bit symbols.
Output symbol values: min = 0, max = 255


Compression Test:      
	Scores                   Ranks
	106724                   157 
	106714                   119 
	106634                     5*
	106719                    81 
	106849                   635 
	106803                   525 
	106866                   762 
	106734                   136 
	106797                   507 
	106907                   832 
	                         --- 
	                           1
Passed Compression Test

Over/under Test:       
	Scores                   Ranks
	15  49791                208   523 
	17  49741                501   395 
	21  49728                953*  271 
	16  49490                462    29*
	16  49891                476   744 
	16  50003                482   903 
	18  49577                692    88 
	18  49606                672    97 
	18  49749                684   375 
	14  49496                 51    21*
	                         ---   --- 
	                           1     2
Passed Over/under Test

Excursion Test:        
	Scores                   Ranks
	35098.9                  974*
	21258.6                  604 
	22510.9                  677 
	19488.6                  527 
	13529                    111 
	30824.3                  938 
	23093.1                  717 
	20572.7                  582 
	18135.7                  447 
	14341.3                  169 
	                         --- 
	                           1
Passed Excursion Test

Directional runs Test: 
	Scores                   Ranks
	66690     7  49799       889   501    21*
	66387     7  49797       120   501    20*
	66660     7  49888       805   501   649 
	66425     7  49882       207   501   617 
	66404     7  49961       153   501   902 
	66857     7  49825       995*  501   205 
	66632     7  49821       792   501   153 
	66458     7  49858       292   501   433 
	66327     7  49823        61   501   186 
	66335     7  49856        69   501   421 
	                         ---   ---   --- 
	                           1     0     2
Passed Directional runs Test

Covariance Test:       
	Scores                   Ranks
	7.28015                  641 
	16.8409                  857 
	-2.89259                 461 
	42.3522                  990*
	8.7202                   687 
	-18.9265                 134 
	14.0767                  812 
	30.569                   966*
	2.00601                  521 
	27.368                   950*
	                         --- 
	                           3
Passed Covariance Test

Collision Test:        
	Scores                   Ranks
	1  19.8007  64           501   688   501 
	1  19.6918  67           501   408   688 
	1  19.4357  61           501    16*  220 
	1  19.558  57            501   115    17*
	1  19.7673  66           501   629   609 
	1  19.6561  63           501   292   423 
	1  19.9115  67           501   898   730 
	1  19.9038  58           501   890    35*
	1  19.4241  64           501    35*  501 
	1  19.5656  63           501   135   436 
	                         ---   ---   --- 
	                           0     2     2
Passed Collision Test

** Passed iid shuffle tests
()

Chi square independence
	score = 64723.9, degrees of freedom = 65280, cut-off = 66402.2
** Passed chi-square independence test

Chi square stability
	score = 2295.29, degrees of freedom = 2313 cut-off = 2528.88
** Passed chi-square stability test

IID = True
min-entropy = 7.87831

Compression sanity check...
	dataset 1 compressed length = 853792, cutoff = 787831...Pass

	dataset 2 compressed length = 853712, cutoff = 787831...Pass

	dataset 3 compressed length = 853072, cutoff = 787831...Pass

	dataset 4 compressed length = 853752, cutoff = 787831...Pass

	dataset 5 compressed length = 854792, cutoff = 787831...Pass

	dataset 6 compressed length = 854424, cutoff = 787831...Pass

	dataset 7 compressed length = 854928, cutoff = 787831...Pass

	dataset 8 compressed length = 853872, cutoff = 787831...Pass

	dataset 9 compressed length = 854376, cutoff = 787831...Pass

	dataset 10 compressed length = 855256, cutoff = 787831...Pass


Collision sanity check...
	Dividing dataset into 4-tuples
	Check rule 1 - do three or more 4-tuples have the same value?...Pass
	Check rule 2 - probability of number of collisions below cutoff
		number of collisions = 8, cutoff = 10.1957...Pass

sanity check = PASS
time: (30090.4 sec)

real	501m31.545s
user	498m50.720s
sys	2m38.150s
+ cd /home/pi/scattergun/SP800-90B_EntropyAssessment
+ python noniid_main.py /home/pi/scattergun/com-diag-scattergun/Scattergun/scattergun.sh-sp800-20151226T213716046444907+0000.uQDAgCzlaU.dat 8 -v
Read in file /home/pi/scattergun/com-diag-scattergun/Scattergun/scattergun.sh-sp800-20151226T213716046444907+0000.uQDAgCzlaU.dat, 1000000 bytes long.
Dataset: 1000000 8-bit symbols.
Output symbol values: min = 0, max = 255
- Collision test          : p(max) = 0.012146, min-entropy = 6.36338
- Partial collection test : p(max) = 0.0093112, min-entropy = 6.74682
- Markov test (map 6 bits): p(max) = 1.6393e-222, min-entropy = 5.7559
- Compression test        : p(max) = 0.00924683, min-entropy = 6.75683
- Frequency test          : p(max) = 0.004103, min-entropy = 7.5525
min-entropy = 5.7559

Compression sanity check...
	dataset 1 compressed length = 853792, cutoff = 575590...Pass

	dataset 2 compressed length = 853712, cutoff = 575590...Pass

	dataset 3 compressed length = 853072, cutoff = 575590...Pass

	dataset 4 compressed length = 853752, cutoff = 575590...Pass

	dataset 5 compressed length = 854792, cutoff = 575590...Pass

	dataset 6 compressed length = 854424, cutoff = 575590...Pass

	dataset 7 compressed length = 854928, cutoff = 575590...Pass

	dataset 8 compressed length = 853872, cutoff = 575590...Pass

	dataset 9 compressed length = 854376, cutoff = 575590...Pass

	dataset 10 compressed length = 855256, cutoff = 575590...Pass


Collision sanity check...
	Dividing dataset into 6-tuples
	Check rule 1 - do three or more 6-tuples have the same value?...Pass
	Check rule 2 - probability of number of collisions below cutoff
		number of collisions = 0, cutoff = 0.557797...Pass

sanity check = PASS
time: (437.551 sec)

real	7m17.903s
user	7m15.910s
sys	0m1.950s
pi@raspberrypi ~/scattergun/com-diag-scattergun/Scattergun $ 

coverclock@silver:Scattergun$ strings /usr/bin/ssh | grep random
Couldn't obtain random bytes (error %ld)
coverclock@silver:Scattergun$ 

coverclock@silver:Scattergun$ objdump -x /usr/bin/ssh

/usr/bin/ssh:     file format elf64-x86-64
/usr/bin/ssh
architecture: i386:x86-64, flags 0x00000150:
HAS_SYMS, DYNAMIC, D_PAGED
start address 0x000000000000d574

Program Header:
    PHDR off    0x0000000000000040 vaddr 0x0000000000000040 paddr 0x0000000000000040 align 2**3
         filesz 0x00000000000001f8 memsz 0x00000000000001f8 flags r-x
  INTERP off    0x0000000000000238 vaddr 0x0000000000000238 paddr 0x0000000000000238 align 2**0
         filesz 0x000000000000001c memsz 0x000000000000001c flags r--
    LOAD off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**21
         filesz 0x0000000000098f0c memsz 0x0000000000098f0c flags r-x
    LOAD off    0x0000000000099620 vaddr 0x0000000000299620 paddr 0x0000000000299620 align 2**21
         filesz 0x0000000000002c50 memsz 0x0000000000006900 flags rw-
 DYNAMIC off    0x000000000009b1c0 vaddr 0x000000000029b1c0 paddr 0x000000000029b1c0 align 2**3
         filesz 0x0000000000000250 memsz 0x0000000000000250 flags rw-
    NOTE off    0x0000000000000254 vaddr 0x0000000000000254 paddr 0x0000000000000254 align 2**2
         filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--
EH_FRAME off    0x000000000008b268 vaddr 0x000000000008b268 paddr 0x000000000008b268 align 2**2
         filesz 0x0000000000001d4c memsz 0x0000000000001d4c flags r--
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
   RELRO off    0x0000000000099620 vaddr 0x0000000000299620 paddr 0x0000000000299620 align 2**0
         filesz 0x00000000000029e0 memsz 0x00000000000029e0 flags r--

Dynamic Section:
  NEEDED               libselinux.so.1
  NEEDED               libcrypto.so.1.0.0
  NEEDED               libdl.so.2
  NEEDED               libz.so.1
  NEEDED               libresolv.so.2
  NEEDED               libgssapi_krb5.so.2
  NEEDED               libc.so.6
  INIT                 0x00000000000093c8
  FINI                 0x000000000005bf34
  INIT_ARRAY           0x0000000000299620
  INIT_ARRAYSZ         0x0000000000000008
  FINI_ARRAY           0x0000000000299628
  FINI_ARRAYSZ         0x0000000000000008
  GNU_HASH             0x0000000000000298
  STRTAB               0x0000000000002f30
  SYMTAB               0x0000000000000518
  STRSZ                0x000000000000168e
  SYMENT               0x0000000000000018
  DEBUG                0x0000000000000000
  PLTGOT               0x000000000029b410
  PLTRELSZ             0x00000000000021c0
  PLTREL               0x0000000000000007
  JMPREL               0x0000000000007208
  RELA                 0x0000000000004a60
  RELASZ               0x00000000000027a8
  RELAENT              0x0000000000000018
  BIND_NOW             0x0000000000000000
  FLAGS_1              0x0000000000000001
  VERNEED              0x0000000000004940
  VERNEEDNUM           0x0000000000000005
  VERSYM               0x00000000000045be
  RELACOUNT            0x0000000000000178

Version References:
  required from libdl.so.2:
    0x09691a75 0x00 12 GLIBC_2.2.5
  required from libresolv.so.2:
    0x09691a75 0x00 09 GLIBC_2.2.5
  required from libgssapi_krb5.so.2:
    0x0dbcc034 0x00 07 gssapi_krb5_2_MIT
  required from libcrypto.so.1.0.0:
    0x066a2b21 0x00 04 OPENSSL_1.0.1
    0x066a2b20 0x00 03 OPENSSL_1.0.0
  required from libc.so.6:
    0x06969195 0x00 14 GLIBC_2.15
    0x06969194 0x00 13 GLIBC_2.14
    0x0d696914 0x00 11 GLIBC_2.4
    0x0d696918 0x00 10 GLIBC_2.8
    0x0d696913 0x00 08 GLIBC_2.3
    0x09691974 0x00 06 GLIBC_2.3.4
    0x06969197 0x00 05 GLIBC_2.17
    0x09691a75 0x00 02 GLIBC_2.2.5

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000238  0000000000000238  00000238  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  0000000000000254  0000000000000254  00000254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000274  0000000000000274  00000274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     00000280  0000000000000298  0000000000000298  00000298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       00002a18  0000000000000518  0000000000000518  00000518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       0000168e  0000000000002f30  0000000000002f30  00002f30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  00000382  00000000000045be  00000000000045be  000045be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000120  0000000000004940  0000000000004940  00004940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rela.dyn     000027a8  0000000000004a60  0000000000004a60  00004a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.plt     000021c0  0000000000007208  0000000000007208  00007208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         0000001a  00000000000093c8  00000000000093c8  000093c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00001690  00000000000093f0  00000000000093f0  000093f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         000514b2  000000000000aa80  000000000000aa80  0000aa80  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .fini         00000009  000000000005bf34  000000000005bf34  0005bf34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       0002f325  000000000005bf40  000000000005bf40  0005bf40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .eh_frame_hdr 00001d4c  000000000008b268  000000000008b268  0008b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame     0000bf54  000000000008cfb8  000000000008cfb8  0008cfb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   00000008  0000000000299620  0000000000299620  00099620  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000008  0000000000299628  0000000000299628  00099628  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 19 .jcr          00000008  0000000000299630  0000000000299630  00099630  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .data.rel.ro  00001b80  0000000000299640  0000000000299640  00099640  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 21 .dynamic      00000250  000000000029b1c0  000000000029b1c0  0009b1c0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .got          00000be0  000000000029b410  000000000029b410  0009b410  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data         00000270  000000000029c000  000000000029c000  0009c000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss          00003ca0  000000000029c280  000000000029c280  0009c270  2**5
                  ALLOC
 25 .gnu_debuglink 00000008  0000000000000000  0000000000000000  0009c270  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
no symbols


coverclock@silver:Scattergun$ 

coverclock@silver:Scattergun$ strings /lib/x86_64-linux-gnu/libcrypto.so.1.0.0 | grep random
DES_random_key
_ossl_old_des_random_seed
_ossl_old_des_random_key
_ossl_096_des_random_seed
random number generation failed
no fips random method set
/dev/urandom
/dev/random
/dev/srandom
random number generator
coverclock@silver:Scattergun$ 

coverclock@silver:src$ git clone https://github.com/openssl/openssl
coverclock@silver:src$ cd openssl
coverclock@silver:src$ git checkout OpenSSL_1_0_0-stable
coverclock@silver:src$ vi e_os.h

# ifndef DEVRANDOM
/*
 * set this to a comma-separated list of 'random' device files to try out. My
 * default, we will try to read at least one of these files
 */
#  define DEVRANDOM "/dev/urandom","/dev/random","/dev/srandom"
# endif
# ifndef DEVRANDOM_EGD
/*
 * set this to a comma-seperated list of 'egd' sockets to try out. These
 * sockets will be tried in the order listed in case accessing the device
 * files listed in DEVRANDOM did not return enough entropy.
 */
#  define DEVRANDOM_EGD "/var/run/egd-pool","/dev/egd-pool","/etc/egd-pool","/etc/entropy"
# endif

jsloan@silver:Scattergun$ dd if=/dev/random of=random.dat bs=1000 count=10000 iflag=fullblock
10000+0 records in
10000+0 records out
10000000 bytes (10 MB) copied, 863.524 s, 11.6 kB/s
jsloan@silver:Scattergun$ mv -i random.dat ~
jsloan@silver:Scattergun$

jsloan@silver:SP800-90B_EntropyAssessment$ ls -l ~/random.dat
-rw-r--r-- 1 jsloan jsloan 10000000 Dec 29 11:43 /home/jsloan/random.dat
jsloan@silver:SP800-90B_EntropyAssessment$ python iid_main.py ~/random.dat 8 1000 -v
Read in file /home/jsloan/random.dat, 10000000 bytes long.
Dataset: 10000000 8-bit symbols.
Output symbol values: min = 0, max = 255


Compression Test:      
	Scores                   Ranks
	1066749                  272 
	1065996                    3*
	1067135                  683 
	1067146                  667 
	1066933                  467 
	1066471                   59 
	1066768                  264 
	1066698                  214 
	1066778                  239 
	1067407                  854 
	                         --- 
	                           1
Passed Compression Test

Over/under Test:       
	Scores                   Ranks
	18  498148               141   559 
	19  497521               358   150 
	24  497600               946   190 
	21  498444               613   738 
	19  497358               355   101 
	20  499118               501   987*
	19  498496               397   821 
	20  497601               501   182 
	19  498113               392   523 
	21  498570               620   878 
	                         ---   --- 
	                           0     1
Passed Over/under Test

Excursion Test:        
	Scores                   Ranks
	80932.9                  821 
	55715.8                  390 
	57678.9                  432 
	44785                    136 
	90924.3                  893 
	36354.6                   38*
	73562.1                  720 
	39897.1                   68 
	46857.5                  200 
	140801                  1000*
	                         --- 
	                           2
Passed Excursion Test

Directional runs Test: 
	Scores                   Ranks
	665410     9  498393     530   545   754 
	665730     8  498227     810   501   482 
	664882     8  498113     135   501   174 
	664687     9  498274      59   559   551 
	664971     8  498582     171   501   932 
	666547     8  498373     999*  501   743 
	665858     8  498379     890   501   756 
	665250     8  498080     368   501    99 
	665027     9  498307     238   564   653 
	666187     9  498481     976*  570   881 
	                         ---   ---   --- 
	                           2     0     0
Passed Directional runs Test

Covariance Test:       
	Scores                   Ranks
	6.16139                  889 
	3.16132                  743 
	-3.4423                  259 
	3.8671                   754 
	14.4925                  995*
	-9.51905                  52 
	2.97793                  726 
	2.28714                  682 
	-3.84277                 255 
	-4.95691                 171 
	                         --- 
	                           1
Passed Covariance Test

Collision Test:        
	Scores                   Ranks
	1  19.693  73            501   227   575 
	1  19.7589  70           501   751   381 
	1  19.8094  72           501   961*  501 
	1  19.7981  69           501   940   226 
	1  19.7063  68           501   333   149 
	1  19.7485  70           501   667   376 
	1  19.7342  69           501   589   262 
	1  19.7681  71           501   814   468 
	1  19.7245  68           501   493   173 
	1  19.7871  72           501   903   501 
	                         ---   ---   --- 
	                           0     1     0
Passed Collision Test

** Passed iid shuffle tests
()

Chi square independence
	score = 64890.5, degrees of freedom = 65280, cut-off = 66402.2
** Passed chi-square independence test

Chi square stability
	score = 2305.59, degrees of freedom = 2313 cut-off = 2528.88
** Passed chi-square stability test

IID = True
min-entropy = 7.96468

Compression sanity check...
	dataset 1 compressed length = 8533992, cutoff = 7.96468e+06...Pass

	dataset 2 compressed length = 8527968, cutoff = 7.96468e+06...Pass

	dataset 3 compressed length = 8537080, cutoff = 7.96468e+06...Pass

	dataset 4 compressed length = 8537168, cutoff = 7.96468e+06...Pass

	dataset 5 compressed length = 8535464, cutoff = 7.96468e+06...Pass

	dataset 6 compressed length = 8531768, cutoff = 7.96468e+06...Pass

	dataset 7 compressed length = 8534144, cutoff = 7.96468e+06...Pass

	dataset 8 compressed length = 8533584, cutoff = 7.96468e+06...Pass

	dataset 9 compressed length = 8534224, cutoff = 7.96468e+06...Pass

	dataset 10 compressed length = 8539256, cutoff = 7.96468e+06...Pass


Collision sanity check...
	Dividing dataset into 5-tuples
	Check rule 1 - do three or more 5-tuples have the same value?...Pass
	Check rule 2 - probability of number of collisions below cutoff
		number of collisions = 2, cutoff = 2.05586...Pass

sanity check = PASS
time: (28654.8 sec)
jsloan@silver:SP800-90B_EntropyAssessment$ 

jsloan@silver:SP800-90B_EntropyAssessment$ python noniid_main.py ~/random.dat 8 -v
Read in file /home/jsloan/random.dat, 10000000 bytes long.
Dataset: 10000000 8-bit symbols.
Output symbol values: min = 0, max = 255
- Collision test          : p(max) = 0.00479126, min-entropy = 7.70538
- Partial collection test : p(max) = 0.00633764, min-entropy = 7.30184
- Markov test (map 6 bits): p(max) = 4.09274e-229, min-entropy = 5.92725
- Compression test        : p(max) = 0.00619507, min-entropy = 7.33466
- Frequency test          : p(max) = 0.0039574, min-entropy = 7.84662
min-entropy = 5.92725

Compression sanity check...
	dataset 1 compressed length = 8533992, cutoff = 5.92725e+06...Pass

	dataset 2 compressed length = 8527968, cutoff = 5.92725e+06...Pass

	dataset 3 compressed length = 8537080, cutoff = 5.92725e+06...Pass

	dataset 4 compressed length = 8537168, cutoff = 5.92725e+06...Pass

	dataset 5 compressed length = 8535464, cutoff = 5.92725e+06...Pass

	dataset 6 compressed length = 8531768, cutoff = 5.92725e+06...Pass

	dataset 7 compressed length = 8534144, cutoff = 5.92725e+06...Pass

	dataset 8 compressed length = 8533584, cutoff = 5.92725e+06...Pass

	dataset 9 compressed length = 8534224, cutoff = 5.92725e+06...Pass

	dataset 10 compressed length = 8539256, cutoff = 5.92725e+06...Pass


Collision sanity check...
	Dividing dataset into 7-tuples
	Check rule 1 - do three or more 7-tuples have the same value?...Pass
	Check rule 2 - probability of number of collisions below cutoff
		number of collisions = 0, cutoff = 0.330222...Pass

sanity check = PASS
time: (414.666 sec)
jsloan@silver:SP800-90B_EntropyAssessment$ 
